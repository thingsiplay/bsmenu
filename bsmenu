#!/bin/env bash

# - Read in from arguments or stdin and create a menu.
# - Select an entry with an integer number.
# - Narrow down menu with a search expression instead a number.

if [ "$1" == "-" ]
then

    shift
    GREPARGS="$@"
    IFS=$'\n'
    set -- $(cat)

elif [[ "$1" == "-h" || "$1" == "--help" ]]
then

    echo "bsmenu - bash select menu"
    echo "Create menu from arguments or stdin and output selection to stdout."
    echo
    echo "CREATE"
    echo
    echo "From Arguments:"
    echo
    echo "  Every single argument is a list entry in the menu, unless" \
         "reading from stdin."
    echo
    echo "  $ bsmenu Entry1 'Entry2' 'Entry 3'"
    echo "  $ bsmenu \$(ls)"
    echo
    echo "From Stdin:"
    echo
    echo "  If the first argument is a dash \`-\`, then read from stdin and" \
         "list each newline seperated line as an entry in the menu." \
         "Anything after the dash will be interpreted as options to grep." \
         "grep is used when a Filter By Expression is performed."
    echo
    echo "  $ echo Entry1\\n'Entry2\nEntry3' | bsmenu -"
    echo "  $ ls | bsmenu - -im1"
    echo
    echo "SELECT"
    echo
    echo "Select By Number:"
    echo
    echo "  Select an entry directly by choosing with an integer number and" \
         "confirm with Enter. The value of the selected entry will be" \
         "output to stdout. A '0' will just end the menu without selection."
    echo 
    echo "  $ bsmenu Entry1 'Entry2' 'Entry 3'"
    echo "  1) Entry1"
    echo "  2) Entry2"
    echo "  3) Entry 3"
    echo "  #? 2"
    echo "  Entry2"
    echo
    echo "Filter By Expression:"
    echo
    echo "  If the user input is any value other than an integer number, then" \
         "that string will be interpreted as a filter to narrow down the" \
         "available menu entries. All non matching entries are excluded and" \
         "a new menu is generated. The Filter is an extended Regular" \
         "Expression by \`grep -E\`. The last entry will be selected" \
         "automatically." 
    echo
    echo "  $ bsmenu Arch 'Fedora' 'Debian' OpenSUSE"
    echo "  1) Arch"
    echo "  2) Fedora"
    echo "  3) Debian"
    echo "  4) OpenSUSE"
    echo "  #? ^.e"
    echo "  "
    echo "  1) Fedora"
    echo "  2) Debian"
    echo "  #? 1"
    echo "  Fedora"
    echo
    echo "Note: In case you use the hyperlink option of ls, make sure to" \
         "disable it with \`ls --hyperlink=never\` when you use any Filter" \
         "By Expression."
    echo
    echo "Copyright (c) 2022 Tuncay D."
    exit

elif [[ "$#" == "0" ]]
then
    exit
fi

OPTION=
REPLY=-1
while [ "$OPTION" == "" ]
do
    if [[ "$REPLY" == "0" ]]
    then
        break
    fi

    select OPTION in "${@}"
    do

        if [[ "$REPLY" =~ ^[0-9]+$ ]]
        then
            echo "$OPTION"
        else

            list=$(printf '%s\0' "${@}" \
                | grep -z $GREPARGS -E "$REPLY" \
                | tr '\000' '\n')

            count_entries=0
            for _ in ${list[@]}
            do
                (( count_entries++ ))
            done

            list_chars="${#list[0]}"
            if [[ "$list_chars" == "0" ]]
            then
                OPTION=0
                break
            elif [[ "$count_entries" == "1" ]]
            then
                REPLY=0
                echo ${list[0]}
                break
            else
                set -- $list
                echo
            fi

        fi
        break
    done < /dev/tty
done

